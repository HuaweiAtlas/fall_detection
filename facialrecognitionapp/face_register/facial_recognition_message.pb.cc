// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: facial_recognition_message.proto

#include "facial_recognition_message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace ascend {
namespace presenter {
namespace facial_recognition {
class CommonResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CommonResponse>
      _instance;
} _CommonResponse_default_instance_;
class RegisterAppDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RegisterApp>
      _instance;
} _RegisterApp_default_instance_;
class BoxDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Box>
      _instance;
} _Box_default_instance_;
class FaceFeatureDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FaceFeature>
      _instance;
} _FaceFeature_default_instance_;
class FaceInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FaceInfo>
      _instance;
} _FaceInfo_default_instance_;
class FaceResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FaceResult>
      _instance;
} _FaceResult_default_instance_;
class FrameInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FrameInfo>
      _instance;
} _FrameInfo_default_instance_;
}  // namespace facial_recognition
}  // namespace presenter
}  // namespace ascend
namespace protobuf_facial_5frecognition_5fmessage_2eproto {
void InitDefaultsCommonResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::ascend::presenter::facial_recognition::_CommonResponse_default_instance_;
    new (ptr) ::ascend::presenter::facial_recognition::CommonResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ascend::presenter::facial_recognition::CommonResponse::InitAsDefaultInstance();
}

void InitDefaultsCommonResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCommonResponseImpl);
}

void InitDefaultsRegisterAppImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::ascend::presenter::facial_recognition::_RegisterApp_default_instance_;
    new (ptr) ::ascend::presenter::facial_recognition::RegisterApp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ascend::presenter::facial_recognition::RegisterApp::InitAsDefaultInstance();
}

void InitDefaultsRegisterApp() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRegisterAppImpl);
}

void InitDefaultsBoxImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::ascend::presenter::facial_recognition::_Box_default_instance_;
    new (ptr) ::ascend::presenter::facial_recognition::Box();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ascend::presenter::facial_recognition::Box::InitAsDefaultInstance();
}

void InitDefaultsBox() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsBoxImpl);
}

void InitDefaultsFaceFeatureImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_facial_5frecognition_5fmessage_2eproto::InitDefaultsBox();
  {
    void* ptr = &::ascend::presenter::facial_recognition::_FaceFeature_default_instance_;
    new (ptr) ::ascend::presenter::facial_recognition::FaceFeature();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ascend::presenter::facial_recognition::FaceFeature::InitAsDefaultInstance();
}

void InitDefaultsFaceFeature() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsFaceFeatureImpl);
}

void InitDefaultsFaceInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::ascend::presenter::facial_recognition::_FaceInfo_default_instance_;
    new (ptr) ::ascend::presenter::facial_recognition::FaceInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ascend::presenter::facial_recognition::FaceInfo::InitAsDefaultInstance();
}

void InitDefaultsFaceInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsFaceInfoImpl);
}

void InitDefaultsFaceResultImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_facial_5frecognition_5fmessage_2eproto::InitDefaultsCommonResponse();
  protobuf_facial_5frecognition_5fmessage_2eproto::InitDefaultsFaceFeature();
  {
    void* ptr = &::ascend::presenter::facial_recognition::_FaceResult_default_instance_;
    new (ptr) ::ascend::presenter::facial_recognition::FaceResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ascend::presenter::facial_recognition::FaceResult::InitAsDefaultInstance();
}

void InitDefaultsFaceResult() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsFaceResultImpl);
}

void InitDefaultsFrameInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_facial_5frecognition_5fmessage_2eproto::InitDefaultsFaceFeature();
  {
    void* ptr = &::ascend::presenter::facial_recognition::_FrameInfo_default_instance_;
    new (ptr) ::ascend::presenter::facial_recognition::FrameInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ascend::presenter::facial_recognition::FrameInfo::InitAsDefaultInstance();
}

void InitDefaultsFrameInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsFrameInfoImpl);
}

::google::protobuf::Metadata file_level_metadata[7];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ascend::presenter::facial_recognition::CommonResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ascend::presenter::facial_recognition::CommonResponse, ret_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ascend::presenter::facial_recognition::CommonResponse, message_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ascend::presenter::facial_recognition::RegisterApp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ascend::presenter::facial_recognition::RegisterApp, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ascend::presenter::facial_recognition::RegisterApp, type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ascend::presenter::facial_recognition::Box, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ascend::presenter::facial_recognition::Box, lt_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ascend::presenter::facial_recognition::Box, lt_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ascend::presenter::facial_recognition::Box, rb_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ascend::presenter::facial_recognition::Box, rb_y_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ascend::presenter::facial_recognition::FaceFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ascend::presenter::facial_recognition::FaceFeature, box_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ascend::presenter::facial_recognition::FaceFeature, vector_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ascend::presenter::facial_recognition::FaceInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ascend::presenter::facial_recognition::FaceInfo, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ascend::presenter::facial_recognition::FaceInfo, image_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ascend::presenter::facial_recognition::FaceResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ascend::presenter::facial_recognition::FaceResult, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ascend::presenter::facial_recognition::FaceResult, response_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ascend::presenter::facial_recognition::FaceResult, feature_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ascend::presenter::facial_recognition::FrameInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ascend::presenter::facial_recognition::FrameInfo, image_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ascend::presenter::facial_recognition::FrameInfo, feature_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ascend::presenter::facial_recognition::CommonResponse)},
  { 7, -1, sizeof(::ascend::presenter::facial_recognition::RegisterApp)},
  { 14, -1, sizeof(::ascend::presenter::facial_recognition::Box)},
  { 23, -1, sizeof(::ascend::presenter::facial_recognition::FaceFeature)},
  { 30, -1, sizeof(::ascend::presenter::facial_recognition::FaceInfo)},
  { 37, -1, sizeof(::ascend::presenter::facial_recognition::FaceResult)},
  { 45, -1, sizeof(::ascend::presenter::facial_recognition::FrameInfo)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::ascend::presenter::facial_recognition::_CommonResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ascend::presenter::facial_recognition::_RegisterApp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ascend::presenter::facial_recognition::_Box_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ascend::presenter::facial_recognition::_FaceFeature_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ascend::presenter::facial_recognition::_FaceInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ascend::presenter::facial_recognition::_FaceResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ascend::presenter::facial_recognition::_FrameInfo_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "facial_recognition_message.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 7);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n facial_recognition_message.proto\022#asce"
      "nd.presenter.facial_recognition\"^\n\016Commo"
      "nResponse\022;\n\003ret\030\001 \001(\0162..ascend.presente"
      "r.facial_recognition.ErrorCode\022\017\n\007messag"
      "e\030\002 \001(\t\"\'\n\013RegisterApp\022\n\n\002id\030\001 \001(\t\022\014\n\004ty"
      "pe\030\002 \001(\t\"=\n\003Box\022\014\n\004lt_x\030\001 \001(\r\022\014\n\004lt_y\030\002 "
      "\001(\r\022\014\n\004rb_x\030\003 \001(\r\022\014\n\004rb_y\030\004 \001(\r\"T\n\013FaceF"
      "eature\0225\n\003box\030\001 \001(\0132(.ascend.presenter.f"
      "acial_recognition.Box\022\016\n\006vector\030\002 \003(\002\"%\n"
      "\010FaceInfo\022\n\n\002id\030\001 \001(\t\022\r\n\005image\030\002 \001(\014\"\242\001\n"
      "\nFaceResult\022\n\n\002id\030\001 \001(\t\022E\n\010response\030\002 \001("
      "\01323.ascend.presenter.facial_recognition."
      "CommonResponse\022A\n\007feature\030\003 \003(\01320.ascend"
      ".presenter.facial_recognition.FaceFeatur"
      "e\"]\n\tFrameInfo\022\r\n\005image\030\001 \001(\014\022A\n\007feature"
      "\030\002 \003(\01320.ascend.presenter.facial_recogni"
      "tion.FaceFeature*\177\n\tErrorCode\022\016\n\nkErrorN"
      "one\020\000\022\032\n\026kErrorAppRegisterExist\020\001\022\031\n\025kEr"
      "rorAppRegisterType\020\002\022\032\n\026kErrorAppRegiste"
      "rLimit\020\003\022\017\n\013kErrorOther\020\005b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 793);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "facial_recognition_message.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_facial_5frecognition_5fmessage_2eproto
namespace ascend {
namespace presenter {
namespace facial_recognition {
const ::google::protobuf::EnumDescriptor* ErrorCode_descriptor() {
  protobuf_facial_5frecognition_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_facial_5frecognition_5fmessage_2eproto::file_level_enum_descriptors[0];
}
bool ErrorCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void CommonResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CommonResponse::kRetFieldNumber;
const int CommonResponse::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CommonResponse::CommonResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_facial_5frecognition_5fmessage_2eproto::InitDefaultsCommonResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ascend.presenter.facial_recognition.CommonResponse)
}
CommonResponse::CommonResponse(const CommonResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.message().size() > 0) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  ret_ = from.ret_;
  // @@protoc_insertion_point(copy_constructor:ascend.presenter.facial_recognition.CommonResponse)
}

void CommonResponse::SharedCtor() {
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ret_ = 0;
  _cached_size_ = 0;
}

CommonResponse::~CommonResponse() {
  // @@protoc_insertion_point(destructor:ascend.presenter.facial_recognition.CommonResponse)
  SharedDtor();
}

void CommonResponse::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CommonResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommonResponse::descriptor() {
  ::protobuf_facial_5frecognition_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_facial_5frecognition_5fmessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CommonResponse& CommonResponse::default_instance() {
  ::protobuf_facial_5frecognition_5fmessage_2eproto::InitDefaultsCommonResponse();
  return *internal_default_instance();
}

CommonResponse* CommonResponse::New(::google::protobuf::Arena* arena) const {
  CommonResponse* n = new CommonResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CommonResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ascend.presenter.facial_recognition.CommonResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ret_ = 0;
  _internal_metadata_.Clear();
}

bool CommonResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ascend.presenter.facial_recognition.CommonResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ascend.presenter.facial_recognition.ErrorCode ret = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_ret(static_cast< ::ascend::presenter::facial_recognition::ErrorCode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string message = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message().data(), static_cast<int>(this->message().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ascend.presenter.facial_recognition.CommonResponse.message"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ascend.presenter.facial_recognition.CommonResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ascend.presenter.facial_recognition.CommonResponse)
  return false;
#undef DO_
}

void CommonResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ascend.presenter.facial_recognition.CommonResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ascend.presenter.facial_recognition.ErrorCode ret = 1;
  if (this->ret() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ret(), output);
  }

  // string message = 2;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ascend.presenter.facial_recognition.CommonResponse.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ascend.presenter.facial_recognition.CommonResponse)
}

::google::protobuf::uint8* CommonResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ascend.presenter.facial_recognition.CommonResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ascend.presenter.facial_recognition.ErrorCode ret = 1;
  if (this->ret() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ret(), target);
  }

  // string message = 2;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ascend.presenter.facial_recognition.CommonResponse.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ascend.presenter.facial_recognition.CommonResponse)
  return target;
}

size_t CommonResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ascend.presenter.facial_recognition.CommonResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  // .ascend.presenter.facial_recognition.ErrorCode ret = 1;
  if (this->ret() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommonResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ascend.presenter.facial_recognition.CommonResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CommonResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CommonResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ascend.presenter.facial_recognition.CommonResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ascend.presenter.facial_recognition.CommonResponse)
    MergeFrom(*source);
  }
}

void CommonResponse::MergeFrom(const CommonResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ascend.presenter.facial_recognition.CommonResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from.ret() != 0) {
    set_ret(from.ret());
  }
}

void CommonResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ascend.presenter.facial_recognition.CommonResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommonResponse::CopyFrom(const CommonResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ascend.presenter.facial_recognition.CommonResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommonResponse::IsInitialized() const {
  return true;
}

void CommonResponse::Swap(CommonResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CommonResponse::InternalSwap(CommonResponse* other) {
  using std::swap;
  message_.Swap(&other->message_);
  swap(ret_, other->ret_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CommonResponse::GetMetadata() const {
  protobuf_facial_5frecognition_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_facial_5frecognition_5fmessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RegisterApp::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RegisterApp::kIdFieldNumber;
const int RegisterApp::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RegisterApp::RegisterApp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_facial_5frecognition_5fmessage_2eproto::InitDefaultsRegisterApp();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ascend.presenter.facial_recognition.RegisterApp)
}
RegisterApp::RegisterApp(const RegisterApp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.type().size() > 0) {
    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  // @@protoc_insertion_point(copy_constructor:ascend.presenter.facial_recognition.RegisterApp)
}

void RegisterApp::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

RegisterApp::~RegisterApp() {
  // @@protoc_insertion_point(destructor:ascend.presenter.facial_recognition.RegisterApp)
  SharedDtor();
}

void RegisterApp::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RegisterApp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegisterApp::descriptor() {
  ::protobuf_facial_5frecognition_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_facial_5frecognition_5fmessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RegisterApp& RegisterApp::default_instance() {
  ::protobuf_facial_5frecognition_5fmessage_2eproto::InitDefaultsRegisterApp();
  return *internal_default_instance();
}

RegisterApp* RegisterApp::New(::google::protobuf::Arena* arena) const {
  RegisterApp* n = new RegisterApp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RegisterApp::Clear() {
// @@protoc_insertion_point(message_clear_start:ascend.presenter.facial_recognition.RegisterApp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool RegisterApp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ascend.presenter.facial_recognition.RegisterApp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ascend.presenter.facial_recognition.RegisterApp.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->type().data(), static_cast<int>(this->type().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ascend.presenter.facial_recognition.RegisterApp.type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ascend.presenter.facial_recognition.RegisterApp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ascend.presenter.facial_recognition.RegisterApp)
  return false;
#undef DO_
}

void RegisterApp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ascend.presenter.facial_recognition.RegisterApp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ascend.presenter.facial_recognition.RegisterApp.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // string type = 2;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ascend.presenter.facial_recognition.RegisterApp.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->type(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ascend.presenter.facial_recognition.RegisterApp)
}

::google::protobuf::uint8* RegisterApp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ascend.presenter.facial_recognition.RegisterApp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ascend.presenter.facial_recognition.RegisterApp.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // string type = 2;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ascend.presenter.facial_recognition.RegisterApp.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ascend.presenter.facial_recognition.RegisterApp)
  return target;
}

size_t RegisterApp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ascend.presenter.facial_recognition.RegisterApp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // string type = 2;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegisterApp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ascend.presenter.facial_recognition.RegisterApp)
  GOOGLE_DCHECK_NE(&from, this);
  const RegisterApp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RegisterApp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ascend.presenter.facial_recognition.RegisterApp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ascend.presenter.facial_recognition.RegisterApp)
    MergeFrom(*source);
  }
}

void RegisterApp::MergeFrom(const RegisterApp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ascend.presenter.facial_recognition.RegisterApp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.type().size() > 0) {

    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
}

void RegisterApp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ascend.presenter.facial_recognition.RegisterApp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterApp::CopyFrom(const RegisterApp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ascend.presenter.facial_recognition.RegisterApp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterApp::IsInitialized() const {
  return true;
}

void RegisterApp::Swap(RegisterApp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RegisterApp::InternalSwap(RegisterApp* other) {
  using std::swap;
  id_.Swap(&other->id_);
  type_.Swap(&other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RegisterApp::GetMetadata() const {
  protobuf_facial_5frecognition_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_facial_5frecognition_5fmessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Box::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Box::kLtXFieldNumber;
const int Box::kLtYFieldNumber;
const int Box::kRbXFieldNumber;
const int Box::kRbYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Box::Box()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_facial_5frecognition_5fmessage_2eproto::InitDefaultsBox();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ascend.presenter.facial_recognition.Box)
}
Box::Box(const Box& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&lt_x_, &from.lt_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&rb_y_) -
    reinterpret_cast<char*>(&lt_x_)) + sizeof(rb_y_));
  // @@protoc_insertion_point(copy_constructor:ascend.presenter.facial_recognition.Box)
}

void Box::SharedCtor() {
  ::memset(&lt_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rb_y_) -
      reinterpret_cast<char*>(&lt_x_)) + sizeof(rb_y_));
  _cached_size_ = 0;
}

Box::~Box() {
  // @@protoc_insertion_point(destructor:ascend.presenter.facial_recognition.Box)
  SharedDtor();
}

void Box::SharedDtor() {
}

void Box::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Box::descriptor() {
  ::protobuf_facial_5frecognition_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_facial_5frecognition_5fmessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Box& Box::default_instance() {
  ::protobuf_facial_5frecognition_5fmessage_2eproto::InitDefaultsBox();
  return *internal_default_instance();
}

Box* Box::New(::google::protobuf::Arena* arena) const {
  Box* n = new Box;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Box::Clear() {
// @@protoc_insertion_point(message_clear_start:ascend.presenter.facial_recognition.Box)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&lt_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rb_y_) -
      reinterpret_cast<char*>(&lt_x_)) + sizeof(rb_y_));
  _internal_metadata_.Clear();
}

bool Box::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ascend.presenter.facial_recognition.Box)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 lt_x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lt_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 lt_y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lt_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 rb_x = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rb_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 rb_y = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rb_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ascend.presenter.facial_recognition.Box)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ascend.presenter.facial_recognition.Box)
  return false;
#undef DO_
}

void Box::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ascend.presenter.facial_recognition.Box)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 lt_x = 1;
  if (this->lt_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->lt_x(), output);
  }

  // uint32 lt_y = 2;
  if (this->lt_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->lt_y(), output);
  }

  // uint32 rb_x = 3;
  if (this->rb_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->rb_x(), output);
  }

  // uint32 rb_y = 4;
  if (this->rb_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->rb_y(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ascend.presenter.facial_recognition.Box)
}

::google::protobuf::uint8* Box::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ascend.presenter.facial_recognition.Box)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 lt_x = 1;
  if (this->lt_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->lt_x(), target);
  }

  // uint32 lt_y = 2;
  if (this->lt_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->lt_y(), target);
  }

  // uint32 rb_x = 3;
  if (this->rb_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->rb_x(), target);
  }

  // uint32 rb_y = 4;
  if (this->rb_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->rb_y(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ascend.presenter.facial_recognition.Box)
  return target;
}

size_t Box::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ascend.presenter.facial_recognition.Box)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 lt_x = 1;
  if (this->lt_x() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->lt_x());
  }

  // uint32 lt_y = 2;
  if (this->lt_y() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->lt_y());
  }

  // uint32 rb_x = 3;
  if (this->rb_x() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->rb_x());
  }

  // uint32 rb_y = 4;
  if (this->rb_y() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->rb_y());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Box::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ascend.presenter.facial_recognition.Box)
  GOOGLE_DCHECK_NE(&from, this);
  const Box* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Box>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ascend.presenter.facial_recognition.Box)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ascend.presenter.facial_recognition.Box)
    MergeFrom(*source);
  }
}

void Box::MergeFrom(const Box& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ascend.presenter.facial_recognition.Box)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.lt_x() != 0) {
    set_lt_x(from.lt_x());
  }
  if (from.lt_y() != 0) {
    set_lt_y(from.lt_y());
  }
  if (from.rb_x() != 0) {
    set_rb_x(from.rb_x());
  }
  if (from.rb_y() != 0) {
    set_rb_y(from.rb_y());
  }
}

void Box::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ascend.presenter.facial_recognition.Box)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Box::CopyFrom(const Box& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ascend.presenter.facial_recognition.Box)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Box::IsInitialized() const {
  return true;
}

void Box::Swap(Box* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Box::InternalSwap(Box* other) {
  using std::swap;
  swap(lt_x_, other->lt_x_);
  swap(lt_y_, other->lt_y_);
  swap(rb_x_, other->rb_x_);
  swap(rb_y_, other->rb_y_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Box::GetMetadata() const {
  protobuf_facial_5frecognition_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_facial_5frecognition_5fmessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FaceFeature::InitAsDefaultInstance() {
  ::ascend::presenter::facial_recognition::_FaceFeature_default_instance_._instance.get_mutable()->box_ = const_cast< ::ascend::presenter::facial_recognition::Box*>(
      ::ascend::presenter::facial_recognition::Box::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FaceFeature::kBoxFieldNumber;
const int FaceFeature::kVectorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FaceFeature::FaceFeature()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_facial_5frecognition_5fmessage_2eproto::InitDefaultsFaceFeature();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ascend.presenter.facial_recognition.FaceFeature)
}
FaceFeature::FaceFeature(const FaceFeature& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      vector_(from.vector_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_box()) {
    box_ = new ::ascend::presenter::facial_recognition::Box(*from.box_);
  } else {
    box_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:ascend.presenter.facial_recognition.FaceFeature)
}

void FaceFeature::SharedCtor() {
  box_ = NULL;
  _cached_size_ = 0;
}

FaceFeature::~FaceFeature() {
  // @@protoc_insertion_point(destructor:ascend.presenter.facial_recognition.FaceFeature)
  SharedDtor();
}

void FaceFeature::SharedDtor() {
  if (this != internal_default_instance()) delete box_;
}

void FaceFeature::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FaceFeature::descriptor() {
  ::protobuf_facial_5frecognition_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_facial_5frecognition_5fmessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FaceFeature& FaceFeature::default_instance() {
  ::protobuf_facial_5frecognition_5fmessage_2eproto::InitDefaultsFaceFeature();
  return *internal_default_instance();
}

FaceFeature* FaceFeature::New(::google::protobuf::Arena* arena) const {
  FaceFeature* n = new FaceFeature;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FaceFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:ascend.presenter.facial_recognition.FaceFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vector_.Clear();
  if (GetArenaNoVirtual() == NULL && box_ != NULL) {
    delete box_;
  }
  box_ = NULL;
  _internal_metadata_.Clear();
}

bool FaceFeature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ascend.presenter.facial_recognition.FaceFeature)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ascend.presenter.facial_recognition.Box box = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_box()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float vector = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_vector())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 18u, input, this->mutable_vector())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ascend.presenter.facial_recognition.FaceFeature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ascend.presenter.facial_recognition.FaceFeature)
  return false;
#undef DO_
}

void FaceFeature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ascend.presenter.facial_recognition.FaceFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ascend.presenter.facial_recognition.Box box = 1;
  if (this->has_box()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->box_, output);
  }

  // repeated float vector = 2;
  if (this->vector_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _vector_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->vector().data(), this->vector_size(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ascend.presenter.facial_recognition.FaceFeature)
}

::google::protobuf::uint8* FaceFeature::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ascend.presenter.facial_recognition.FaceFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ascend.presenter.facial_recognition.Box box = 1;
  if (this->has_box()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->box_, deterministic, target);
  }

  // repeated float vector = 2;
  if (this->vector_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _vector_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->vector_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ascend.presenter.facial_recognition.FaceFeature)
  return target;
}

size_t FaceFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ascend.presenter.facial_recognition.FaceFeature)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated float vector = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->vector_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _vector_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // .ascend.presenter.facial_recognition.Box box = 1;
  if (this->has_box()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->box_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FaceFeature::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ascend.presenter.facial_recognition.FaceFeature)
  GOOGLE_DCHECK_NE(&from, this);
  const FaceFeature* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FaceFeature>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ascend.presenter.facial_recognition.FaceFeature)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ascend.presenter.facial_recognition.FaceFeature)
    MergeFrom(*source);
  }
}

void FaceFeature::MergeFrom(const FaceFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ascend.presenter.facial_recognition.FaceFeature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vector_.MergeFrom(from.vector_);
  if (from.has_box()) {
    mutable_box()->::ascend::presenter::facial_recognition::Box::MergeFrom(from.box());
  }
}

void FaceFeature::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ascend.presenter.facial_recognition.FaceFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FaceFeature::CopyFrom(const FaceFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ascend.presenter.facial_recognition.FaceFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FaceFeature::IsInitialized() const {
  return true;
}

void FaceFeature::Swap(FaceFeature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FaceFeature::InternalSwap(FaceFeature* other) {
  using std::swap;
  vector_.InternalSwap(&other->vector_);
  swap(box_, other->box_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FaceFeature::GetMetadata() const {
  protobuf_facial_5frecognition_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_facial_5frecognition_5fmessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FaceInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FaceInfo::kIdFieldNumber;
const int FaceInfo::kImageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FaceInfo::FaceInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_facial_5frecognition_5fmessage_2eproto::InitDefaultsFaceInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ascend.presenter.facial_recognition.FaceInfo)
}
FaceInfo::FaceInfo(const FaceInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  image_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.image().size() > 0) {
    image_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_);
  }
  // @@protoc_insertion_point(copy_constructor:ascend.presenter.facial_recognition.FaceInfo)
}

void FaceInfo::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

FaceInfo::~FaceInfo() {
  // @@protoc_insertion_point(destructor:ascend.presenter.facial_recognition.FaceInfo)
  SharedDtor();
}

void FaceInfo::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FaceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FaceInfo::descriptor() {
  ::protobuf_facial_5frecognition_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_facial_5frecognition_5fmessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FaceInfo& FaceInfo::default_instance() {
  ::protobuf_facial_5frecognition_5fmessage_2eproto::InitDefaultsFaceInfo();
  return *internal_default_instance();
}

FaceInfo* FaceInfo::New(::google::protobuf::Arena* arena) const {
  FaceInfo* n = new FaceInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FaceInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ascend.presenter.facial_recognition.FaceInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool FaceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ascend.presenter.facial_recognition.FaceInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ascend.presenter.facial_recognition.FaceInfo.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes image = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_image()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ascend.presenter.facial_recognition.FaceInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ascend.presenter.facial_recognition.FaceInfo)
  return false;
#undef DO_
}

void FaceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ascend.presenter.facial_recognition.FaceInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ascend.presenter.facial_recognition.FaceInfo.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // bytes image = 2;
  if (this->image().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->image(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ascend.presenter.facial_recognition.FaceInfo)
}

::google::protobuf::uint8* FaceInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ascend.presenter.facial_recognition.FaceInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ascend.presenter.facial_recognition.FaceInfo.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // bytes image = 2;
  if (this->image().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->image(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ascend.presenter.facial_recognition.FaceInfo)
  return target;
}

size_t FaceInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ascend.presenter.facial_recognition.FaceInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // bytes image = 2;
  if (this->image().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->image());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FaceInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ascend.presenter.facial_recognition.FaceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const FaceInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FaceInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ascend.presenter.facial_recognition.FaceInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ascend.presenter.facial_recognition.FaceInfo)
    MergeFrom(*source);
  }
}

void FaceInfo::MergeFrom(const FaceInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ascend.presenter.facial_recognition.FaceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.image().size() > 0) {

    image_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_);
  }
}

void FaceInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ascend.presenter.facial_recognition.FaceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FaceInfo::CopyFrom(const FaceInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ascend.presenter.facial_recognition.FaceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FaceInfo::IsInitialized() const {
  return true;
}

void FaceInfo::Swap(FaceInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FaceInfo::InternalSwap(FaceInfo* other) {
  using std::swap;
  id_.Swap(&other->id_);
  image_.Swap(&other->image_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FaceInfo::GetMetadata() const {
  protobuf_facial_5frecognition_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_facial_5frecognition_5fmessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FaceResult::InitAsDefaultInstance() {
  ::ascend::presenter::facial_recognition::_FaceResult_default_instance_._instance.get_mutable()->response_ = const_cast< ::ascend::presenter::facial_recognition::CommonResponse*>(
      ::ascend::presenter::facial_recognition::CommonResponse::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FaceResult::kIdFieldNumber;
const int FaceResult::kResponseFieldNumber;
const int FaceResult::kFeatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FaceResult::FaceResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_facial_5frecognition_5fmessage_2eproto::InitDefaultsFaceResult();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ascend.presenter.facial_recognition.FaceResult)
}
FaceResult::FaceResult(const FaceResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      feature_(from.feature_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.has_response()) {
    response_ = new ::ascend::presenter::facial_recognition::CommonResponse(*from.response_);
  } else {
    response_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:ascend.presenter.facial_recognition.FaceResult)
}

void FaceResult::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  response_ = NULL;
  _cached_size_ = 0;
}

FaceResult::~FaceResult() {
  // @@protoc_insertion_point(destructor:ascend.presenter.facial_recognition.FaceResult)
  SharedDtor();
}

void FaceResult::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete response_;
}

void FaceResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FaceResult::descriptor() {
  ::protobuf_facial_5frecognition_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_facial_5frecognition_5fmessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FaceResult& FaceResult::default_instance() {
  ::protobuf_facial_5frecognition_5fmessage_2eproto::InitDefaultsFaceResult();
  return *internal_default_instance();
}

FaceResult* FaceResult::New(::google::protobuf::Arena* arena) const {
  FaceResult* n = new FaceResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FaceResult::Clear() {
// @@protoc_insertion_point(message_clear_start:ascend.presenter.facial_recognition.FaceResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  feature_.Clear();
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && response_ != NULL) {
    delete response_;
  }
  response_ = NULL;
  _internal_metadata_.Clear();
}

bool FaceResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ascend.presenter.facial_recognition.FaceResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ascend.presenter.facial_recognition.FaceResult.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ascend.presenter.facial_recognition.CommonResponse response = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ascend.presenter.facial_recognition.FaceFeature feature = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_feature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ascend.presenter.facial_recognition.FaceResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ascend.presenter.facial_recognition.FaceResult)
  return false;
#undef DO_
}

void FaceResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ascend.presenter.facial_recognition.FaceResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ascend.presenter.facial_recognition.FaceResult.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // .ascend.presenter.facial_recognition.CommonResponse response = 2;
  if (this->has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->response_, output);
  }

  // repeated .ascend.presenter.facial_recognition.FaceFeature feature = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->feature_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->feature(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ascend.presenter.facial_recognition.FaceResult)
}

::google::protobuf::uint8* FaceResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ascend.presenter.facial_recognition.FaceResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ascend.presenter.facial_recognition.FaceResult.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // .ascend.presenter.facial_recognition.CommonResponse response = 2;
  if (this->has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->response_, deterministic, target);
  }

  // repeated .ascend.presenter.facial_recognition.FaceFeature feature = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->feature_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->feature(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ascend.presenter.facial_recognition.FaceResult)
  return target;
}

size_t FaceResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ascend.presenter.facial_recognition.FaceResult)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .ascend.presenter.facial_recognition.FaceFeature feature = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->feature_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->feature(static_cast<int>(i)));
    }
  }

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // .ascend.presenter.facial_recognition.CommonResponse response = 2;
  if (this->has_response()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->response_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FaceResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ascend.presenter.facial_recognition.FaceResult)
  GOOGLE_DCHECK_NE(&from, this);
  const FaceResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FaceResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ascend.presenter.facial_recognition.FaceResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ascend.presenter.facial_recognition.FaceResult)
    MergeFrom(*source);
  }
}

void FaceResult::MergeFrom(const FaceResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ascend.presenter.facial_recognition.FaceResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  feature_.MergeFrom(from.feature_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.has_response()) {
    mutable_response()->::ascend::presenter::facial_recognition::CommonResponse::MergeFrom(from.response());
  }
}

void FaceResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ascend.presenter.facial_recognition.FaceResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FaceResult::CopyFrom(const FaceResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ascend.presenter.facial_recognition.FaceResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FaceResult::IsInitialized() const {
  return true;
}

void FaceResult::Swap(FaceResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FaceResult::InternalSwap(FaceResult* other) {
  using std::swap;
  feature_.InternalSwap(&other->feature_);
  id_.Swap(&other->id_);
  swap(response_, other->response_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FaceResult::GetMetadata() const {
  protobuf_facial_5frecognition_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_facial_5frecognition_5fmessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FrameInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FrameInfo::kImageFieldNumber;
const int FrameInfo::kFeatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FrameInfo::FrameInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_facial_5frecognition_5fmessage_2eproto::InitDefaultsFrameInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ascend.presenter.facial_recognition.FrameInfo)
}
FrameInfo::FrameInfo(const FrameInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      feature_(from.feature_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  image_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.image().size() > 0) {
    image_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_);
  }
  // @@protoc_insertion_point(copy_constructor:ascend.presenter.facial_recognition.FrameInfo)
}

void FrameInfo::SharedCtor() {
  image_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

FrameInfo::~FrameInfo() {
  // @@protoc_insertion_point(destructor:ascend.presenter.facial_recognition.FrameInfo)
  SharedDtor();
}

void FrameInfo::SharedDtor() {
  image_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FrameInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FrameInfo::descriptor() {
  ::protobuf_facial_5frecognition_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_facial_5frecognition_5fmessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FrameInfo& FrameInfo::default_instance() {
  ::protobuf_facial_5frecognition_5fmessage_2eproto::InitDefaultsFrameInfo();
  return *internal_default_instance();
}

FrameInfo* FrameInfo::New(::google::protobuf::Arena* arena) const {
  FrameInfo* n = new FrameInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FrameInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ascend.presenter.facial_recognition.FrameInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  feature_.Clear();
  image_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool FrameInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ascend.presenter.facial_recognition.FrameInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes image = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_image()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ascend.presenter.facial_recognition.FaceFeature feature = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_feature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ascend.presenter.facial_recognition.FrameInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ascend.presenter.facial_recognition.FrameInfo)
  return false;
#undef DO_
}

void FrameInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ascend.presenter.facial_recognition.FrameInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes image = 1;
  if (this->image().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->image(), output);
  }

  // repeated .ascend.presenter.facial_recognition.FaceFeature feature = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->feature_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->feature(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ascend.presenter.facial_recognition.FrameInfo)
}

::google::protobuf::uint8* FrameInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ascend.presenter.facial_recognition.FrameInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes image = 1;
  if (this->image().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->image(), target);
  }

  // repeated .ascend.presenter.facial_recognition.FaceFeature feature = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->feature_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->feature(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ascend.presenter.facial_recognition.FrameInfo)
  return target;
}

size_t FrameInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ascend.presenter.facial_recognition.FrameInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .ascend.presenter.facial_recognition.FaceFeature feature = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->feature_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->feature(static_cast<int>(i)));
    }
  }

  // bytes image = 1;
  if (this->image().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->image());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FrameInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ascend.presenter.facial_recognition.FrameInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const FrameInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FrameInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ascend.presenter.facial_recognition.FrameInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ascend.presenter.facial_recognition.FrameInfo)
    MergeFrom(*source);
  }
}

void FrameInfo::MergeFrom(const FrameInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ascend.presenter.facial_recognition.FrameInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  feature_.MergeFrom(from.feature_);
  if (from.image().size() > 0) {

    image_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_);
  }
}

void FrameInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ascend.presenter.facial_recognition.FrameInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FrameInfo::CopyFrom(const FrameInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ascend.presenter.facial_recognition.FrameInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameInfo::IsInitialized() const {
  return true;
}

void FrameInfo::Swap(FrameInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FrameInfo::InternalSwap(FrameInfo* other) {
  using std::swap;
  feature_.InternalSwap(&other->feature_);
  image_.Swap(&other->image_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FrameInfo::GetMetadata() const {
  protobuf_facial_5frecognition_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_facial_5frecognition_5fmessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace facial_recognition
}  // namespace presenter
}  // namespace ascend

// @@protoc_insertion_point(global_scope)
